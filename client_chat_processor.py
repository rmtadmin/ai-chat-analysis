#!/usr/bin/env python3
"""
client_chat_processor.py ‚Äî v0.4.1 (zero‚Äëarg, bug‚Äëfix)
====================================================
* –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è `print` –≤ –∫–æ–Ω—Ü–µ, –¥–æ–±–∞–≤–ª–µ–Ω –±–ª–æ–∫ `except` –∏ guard
  `if __name__ == "__main__": main()`.
* –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–ª—É—á–∞–π–Ω–∞—è —É—Å–µ—á—ë–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, –∏–∑‚Äë–∑–∞ –∫–æ—Ç–æ—Ä–æ–π –≤–æ–∑–Ω–∏–∫–∞–ª `SyntaxError`.
"""
from __future__ import annotations

import json
import os
import signal
import subprocess
import sys
import time
import uuid
from contextlib import contextmanager
from dataclasses import dataclass
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, Optional

import requests

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dataclass
class EnvConfig:
    """–ß–∏—Ç–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ env‚Äë–ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö."""

    chat_file: Path = Path(os.getenv("CHAT_FILE", "data/chat.json"))
    output_dir: Path = Path(os.getenv("OUTPUT_DIR", "output"))

    # LLM connection (direct or via SSH)
    llm_host: Optional[str] = os.getenv("LLM_HOST")
    llm_model: str = os.getenv("LLM_MODEL", "gemma3n")
    api_key: Optional[str] = os.getenv("LLM_API_KEY")

    # SSH tunnel settings (used when llm_host is None)
    ssh_host: Optional[str] = os.getenv("SSH_HOST")
    ssh_user: str = os.getenv("SSH_USER", os.getenv("USER", ""))
    ssh_port: int = int(os.getenv("SSH_PORT", 22))
    remote_port: int = int(os.getenv("REMOTE_PORT", 11434))
    local_port: int = int(os.getenv("LOCAL_PORT", 11434))
    ssh_pass: Optional[str] = os.getenv("SSH_PASS")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üîå SSH‚Äë—Ç—É–Ω–Ω–µ–ª—å
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class SshTunnel:
    def __init__(self, cfg: EnvConfig):
        self.cfg = cfg
        self.proc: subprocess.Popen | None = None

    def __enter__(self) -> str:  # noqa: D401
        target = f"{self.cfg.ssh_user}@{self.cfg.ssh_host}"
        cmd = [
            "ssh",
            "-o",
            "StrictHostKeyChecking=no",
            "-p",
            str(self.cfg.ssh_port),
            "-L",
            f"{self.cfg.local_port}:localhost:{self.cfg.remote_port}",
            target,
            "-N",
        ]
        if self.cfg.ssh_pass:
            cmd = ["sshpass", "-p", self.cfg.ssh_pass] + cmd
        self.proc = subprocess.Popen(
            cmd,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
            preexec_fn=os.setsid if os.name != "nt" else None,
            creationflags=subprocess.CREATE_NEW_PROCESS_GROUP if os.name == "nt" else 0,
        )
        time.sleep(1)  # –¥–∞—ë–º —Ç—É–Ω–Ω–µ–ª—é –ø–æ–¥–Ω—è—Ç—å—Å—è
        return f"http://localhost:{self.cfg.local_port}"

    def __exit__(self, exc_type, exc, tb):  # noqa: D401
        if self.proc and self.proc.poll() is None:
            try:
                if os.name == "nt":
                    self.proc.send_signal(signal.CTRL_BREAK_EVENT)
                else:
                    os.killpg(self.proc.pid, signal.SIGTERM)
            except Exception:  # pylint: disable=broad-except
                pass
            self.proc.wait(timeout=5)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üß© –í—ã–∑–æ–≤ LLM
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def call_llm(prompt: str, host: str, model: str, api_key: str | None = None) -> Dict[str, Any]:
    url = f"{host.rstrip('/')}/api/generate"
    headers: Dict[str, str] = {"Content-Type": "application/json"}
    if api_key:
        headers["Authorization"] = f"Bearer {api_key}"    
    payload = {"model": model, "prompt": prompt}

    try:
        resp = requests.post(url, json=payload, headers=headers, stream=True, timeout=180)
        resp.raise_for_status()
    except requests.RequestException as e:
        raise RuntimeError(f"LLM request failed: {e}") from e

    chunks = []
    print("üì° –ü–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç LLM:")
    for line in resp.iter_lines(decode_unicode=True):
        if not line.strip():
            continue
        try:
            obj = json.loads(line)
            chunk = obj.get("response", "")
            chunks.append(chunk)
            print("üß©", repr(chunk))
        except json.JSONDecodeError as e:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ NDJSON —Å—Ç—Ä–æ–∫–∏:", line)
            raise

    result = "".join(chunks).strip()
    return {"response": result}



# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üìù Prompt
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def prepare_prompt(chat_text: str, max_chars: int = 15_000) -> str:
    sys_msg = (
        "–¢—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏.\n"
        "–ù–∞ –≤—Ö–æ–¥–µ —Ç–µ–±–µ –¥–∞—ë—Ç—Å—è –¥–∏–∞–ª–æ–≥ (—Ñ–æ—Ä–º–∞—Ç Telegram).\n"
        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∏–∑–≤–ª–µ—á—å –∏–∑ –Ω–µ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n\n"
        "- –±—ã–ª –ª–∏ –∑–∞–∫–∞–∑ (`has_order`)\n"
        "- –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑–¥–µ–ª–∏–π (–º–∞—Ç–µ—Ä–∏–∞–ª, —Ü–≤–µ—Ç, —Ä–∞–∑–º–µ—Ä, —Å—Ç–æ–∏–º–æ—Å—Ç—å, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)\n"
        "- –Ω–∞–ª–∏—á–∏–µ –∂–∞–ª–æ–± –∏–ª–∏ —Ä–µ–∫–ª–∞–º–∞—Ü–∏–π (`complaint`)\n"
        "- –∏—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ (`total_sum`)\n"
        "- –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —á–∞—Ç–∞ (`summary`)\n\n"
        "–ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —è–≤–Ω–æ —É–∫–∞–∂–∏ —ç—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `has_order: false`).\n"
        "–û—Ç–≤–µ—Ç –≤–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.\n\n"
        "–í–≤–æ–¥–Ω–æ–π –¥–∏–∞–ª–æ–≥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏ <chat> ... </chat>"
    )
    return (f"<system>\n{sys_msg}\n</system>\n<chat>\n{chat_text}\n</chat>")[:max_chars]



# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üìÇ I/O helpers
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def load_chat(path: Path) -> str:
    print(f"üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª: {path}")
    if not path.exists():
        raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
    
    if path.suffix.lower() == ".json":
        print(f"üîç –û–ø—Ä–µ–¥–µ–ª—ë–Ω —Ñ–æ—Ä–º–∞—Ç: JSON")

        try:
            with path.open("r", encoding="utf-8") as f:
                data = json.load(f)
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ JSON:", e)
            raise

        print(f"üì¶ –¢–∏–ø –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞: {type(data)}")
        if isinstance(data, dict):
            if "messages" in data:
                print("‚úÖ –ù–∞–π–¥–µ–Ω –∫–ª—é—á 'messages' ‚Äî Telegram —Ñ–æ—Ä–º–∞—Ç")
                data = data["messages"]
            else:
                raise ValueError("‚ùå –û–∂–∏–¥–∞–ª—Å—è –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –∫–ª—é—á 'messages' –≤ JSON")
        elif isinstance(data, list):
            print("‚úÖ JSON ‚Äî —ç—Ç–æ —Å–ø–∏—Å–æ–∫")
        else:
            raise TypeError("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON-—Ñ–∞–π–ª–∞")

        texts = []
        for msg in data:
            if not isinstance(msg, dict):
                continue
            text = msg.get("text", "")
            if isinstance(text, list):
                text = "".join(part.get("text", "") for part in text if isinstance(part, dict))
            if isinstance(text, str) and text.strip():
                texts.append(text.strip())

        print(f"üßæ –ò–∑–≤–ª–µ—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(texts)}")
        return "\n".join(texts)

    print(f"üìÑ –ß—Ç–µ–Ω–∏–µ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª")
    return path.read_text(encoding="utf-8")



def save_result(out_dir: Path, src_file: Path, llm_resp: Dict[str, Any], host: str, model: str) -> Path:
    out_dir.mkdir(parents=True, exist_ok=True)
    out_path = out_dir / f"{src_file.stem}_analysis.json"
    result = {
        "id": str(uuid.uuid4()),
        "source_file": str(src_file),
        "created_at": datetime.utcnow().isoformat() + "Z",
        "host": host,
        "model": model,
        "llm_response": llm_resp["response"],
    }
    out_path.write_text(json.dumps(result, ensure_ascii=False, indent=2), encoding="utf-8")
    return out_path


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üöÄ Main
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def main() -> None:
    cfg = EnvConfig()

    # autodiscover chat file if default not present
    if not cfg.chat_file.exists():
        candidates = list(Path("data").glob("*.json")) + list(Path("data").glob("*.txt"))
        if not candidates:
            print("‚ùå No chat file found (set CHAT_FILE)", file=sys.stderr)
            sys.exit(1)
        cfg.chat_file = candidates[0]
        print(f"‚ÑπÔ∏è  Using first chat file: {cfg.chat_file}")

    # Determine connection
    if cfg.llm_host:
        host_cm = contextmanager(lambda: (yield cfg.llm_host))()
    else:
        if not cfg.ssh_host:
            print("‚ùå Set LLM_HOST or SSH_HOST env variable", file=sys.stderr)
            sys.exit(1)
        host_cm = SshTunnel(cfg)

    with host_cm as host_url:
        try:
            chat_text = load_chat(cfg.chat_file)
            prompt = prepare_prompt(chat_text)
            llm_data = call_llm(prompt, host_url, cfg.llm_model, cfg.api_key)
            out = save_result(cfg.output_dir, cfg.chat_file, llm_data, host_url, cfg.llm_model)
            append_history({
                "timestamp": datetime.utcnow().isoformat() + "Z",
                "chat_file": str(cfg.chat_file),
                "output": str(out),
                "model": cfg.llm_model,
                "host": host_url,
                "success": True,
            })
            try:
                print(f"‚úÖ Saved ‚Üí {out.relative_to(Path.cwd())}")
            except ValueError:
                print(f"‚úÖ Saved ‚Üí {out}")

        except Exception as exc:  # pylint: disable=broad-except
            print(f"‚ùå Error: {exc}", file=sys.stderr)
            append_history({
                "timestamp": datetime.utcnow().isoformat() + "Z",
                "chat_file": str(cfg.chat_file),
                "model": cfg.llm_model,
                "host": cfg.llm_host or cfg.ssh_host,
                "success": False,
                "error": str(exc),
            })
            sys.exit(1)

def append_history(entry: dict, path: Path = Path("output/history.jsonl")) -> None:
    path.parent.mkdir(parents=True, exist_ok=True)
    with path.open("a", encoding="utf-8") as f:
        f.write(json.dumps(entry, ensure_ascii=False) + "\n")


if __name__ == "__main__":
    main()
