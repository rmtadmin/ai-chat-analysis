#!/usr/bin/env python3
"""
client_chat_processor.py ‚Äî v0.4.1 (zero‚Äëarg, bug‚Äëfix)
====================================================
* –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è `print` –≤ –∫–æ–Ω—Ü–µ, –¥–æ–±–∞–≤–ª–µ–Ω –±–ª–æ–∫ `except` –∏ guard
  `if __name__ == "__main__": main()`.
* –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–ª—É—á–∞–π–Ω–∞—è —É—Å–µ—á—ë–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, –∏–∑‚Äë–∑–∞ –∫–æ—Ç–æ—Ä–æ–π –≤–æ–∑–Ω–∏–∫–∞–ª `SyntaxError`.
"""
from __future__ import annotations
import re

from db import insert_json_result
import json
import os
import signal
import subprocess
import sys
import time
import uuid
from contextlib import contextmanager
from dataclasses import dataclass
from datetime import datetime, timezone

from pathlib import Path
from typing import Any, Dict, Optional
from datetime import datetime
import requests
import hashlib

def compute_text_hash(text: str) -> str:
    return hashlib.sha1(text.encode("utf-8")).hexdigest()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dataclass
class EnvConfig:
    """–ß–∏—Ç–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ env‚Äë–ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö."""

    chat_file: Path = Path(os.getenv("CHAT_FILE", "data/chat.json"))
    output_dir: Path = Path(os.getenv("OUTPUT_DIR", "output"))

    # LLM connection (direct or via SSH)
    llm_host: Optional[str] = os.getenv("LLM_HOST")
    llm_model: str = os.getenv("LLM_MODEL", "gemma3n")
    api_key: Optional[str] = os.getenv("LLM_API_KEY")

    # SSH tunnel settings (used when llm_host is None)
    ssh_host: Optional[str] = os.getenv("SSH_HOST")
    ssh_user: str = os.getenv("SSH_USER", os.getenv("USER", ""))
    ssh_port: int = int(os.getenv("SSH_PORT", 22))
    remote_port: int = int(os.getenv("REMOTE_PORT", 11434))
    local_port: int = int(os.getenv("LOCAL_PORT", 11434))
    ssh_pass: Optional[str] = os.getenv("SSH_PASS")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üîå SSH‚Äë—Ç—É–Ω–Ω–µ–ª—å
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class SshTunnel:
    def __init__(self, cfg: EnvConfig):
        self.cfg = cfg
        self.proc: subprocess.Popen | None = None

    def __enter__(self) -> str:  # noqa: D401
        target = f"{self.cfg.ssh_user}@{self.cfg.ssh_host}"
        cmd = [
            "ssh",
            "-o",
            "StrictHostKeyChecking=no",
            "-p",
            str(self.cfg.ssh_port),
            "-L",
            f"{self.cfg.local_port}:localhost:{self.cfg.remote_port}",
            target,
            "-N",
        ]
        if self.cfg.ssh_pass:
            cmd = ["sshpass", "-p", self.cfg.ssh_pass] + cmd
        self.proc = subprocess.Popen(
            cmd,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
            preexec_fn=os.setsid if os.name != "nt" else None,
            creationflags=subprocess.CREATE_NEW_PROCESS_GROUP if os.name == "nt" else 0,
        )
        time.sleep(1)  # –¥–∞—ë–º —Ç—É–Ω–Ω–µ–ª—é –ø–æ–¥–Ω—è—Ç—å—Å—è
        return f"http://localhost:{self.cfg.local_port}"

    def __exit__(self, exc_type, exc, tb):  # noqa: D401
        if self.proc and self.proc.poll() is None:
            try:
                if os.name == "nt":
                    self.proc.send_signal(signal.CTRL_BREAK_EVENT)
                else:
                    os.killpg(self.proc.pid, signal.SIGTERM)
            except Exception:  # pylint: disable=broad-except
                pass
            self.proc.wait(timeout=5)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üß© –í—ã–∑–æ–≤ LLM
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def call_llm(prompt: str, host: str, model: str, api_key: str | None = None) -> Dict[str, Any]:
    url = f"{host.rstrip('/')}/api/generate"
    headers: Dict[str, str] = {"Content-Type": "application/json"}
    if api_key:
        headers["Authorization"] = f"Bearer {api_key}"    
    payload = {"model": model, "prompt": prompt}

    try:
        resp = requests.post(url, json=payload, headers=headers, stream=True, timeout=180)
        resp.raise_for_status()
    except requests.RequestException as e:
        raise RuntimeError(f"LLM request failed: {e}") from e

    chunks = []
    print("üì° –ü–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç LLM:")
    for line in resp.iter_lines(decode_unicode=True):
        if not line.strip():
            continue
        try:
            obj = json.loads(line)
            chunk = obj.get("response", "")
            chunks.append(chunk)
            print("üß©", repr(chunk))
        except json.JSONDecodeError as e:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ NDJSON —Å—Ç—Ä–æ–∫–∏:", line)
            raise

    result = "".join(chunks).strip()
    # üß† –†–æ–±–∞—Å—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
    if isinstance(result, dict):
        parsed = result
    else:
        # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å JSON-–±–ª–æ–∫ –∏–∑ —Å—Ç—Ä–æ–∫–∏
        match = re.search(r"\{.*\}", result, re.DOTALL)
        if not match:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ JSON-–æ–±—ä–µ–∫—Ç –≤ –æ—Ç–≤–µ—Ç–µ LLM")
        cleaned = match.group(0)
        parsed = json.loads(cleaned)

    return {"response": result, "parsed": parsed}



# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üìù Prompt
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def prepare_prompt(chat_text: str, max_chars: int = 15_000) -> str:
    sys_msg = (
        "–¢—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏.\n"
        "–ù–∞ –≤—Ö–æ–¥–µ —Ç–µ–±–µ –¥–∞—ë—Ç—Å—è –¥–∏–∞–ª–æ–≥ (—Ñ–æ—Ä–º–∞—Ç Telegram).\n"
        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∏–∑–≤–ª–µ—á—å –∏–∑ –Ω–µ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n\n"
        "- –±—ã–ª –ª–∏ –∑–∞–∫–∞–∑ (`has_order`)\n"
        "- –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑–¥–µ–ª–∏–π (–º–∞—Ç–µ—Ä–∏–∞–ª, —Ü–≤–µ—Ç, —Ä–∞–∑–º–µ—Ä, —Å—Ç–æ–∏–º–æ—Å—Ç—å, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)\n"
        "- –Ω–∞–ª–∏—á–∏–µ –∂–∞–ª–æ–± –∏–ª–∏ —Ä–µ–∫–ª–∞–º–∞—Ü–∏–π (`complaint`)\n"
        "- –∏—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ (`total_sum`)\n"
        "- –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —á–∞—Ç–∞ (`summary`)\n\n"
        "–ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —è–≤–Ω–æ —É–∫–∞–∂–∏ —ç—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `has_order: false`).\n"
        "–û—Ç–≤–µ—Ç –≤–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.\n\n"
        "–í–≤–æ–¥–Ω–æ–π –¥–∏–∞–ª–æ–≥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏ <chat> ... </chat>"
    )
    return (f"<system>\n{sys_msg}\n</system>\n<chat>\n{chat_text}\n</chat>")[:max_chars]
    sys_msg = (
        "–¢—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ò–∑ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª–∏:"\
        "\n1. –ï—Å—Ç—å –ª–∏ –∑–∞–∫–∞–∑ –∏ –µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–º–∞—Ç–µ—Ä–∏–∞–ª, —Ä–∞–∑–º–µ—Ä—ã, —Ü–≤–µ—Ç)."\
        "\n2. –¶–µ–Ω—É, –µ—Å–ª–∏ –æ–Ω–∞ —Ñ–∏–≥—É—Ä–∏—Ä—É–µ—Ç."\
        "\n3. –ñ–∞–ª–æ–±—ã/—Ä–µ–∫–ª–∞–º–∞—Ü–∏–∏."\
        "\n\n–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Å–æ —Å—Ö–µ–º–æ–π: "\
        "{'has_order': bool, 'order': {...}|null, 'complaint': str|null, 'summary': str}.\n"
    )
    return (f"<system>\n{sys_msg}\n</system>\n<chat>\n{chat_text}\n</chat>")[:max_chars]


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üìÇ I/O helpers
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def load_chat(path: Path) -> str:
    print(f"üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª: {path}")
    if not path.exists():
        raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
    
    if path.suffix.lower() == ".json":
        print(f"üîç –û–ø—Ä–µ–¥–µ–ª—ë–Ω —Ñ–æ—Ä–º–∞—Ç: JSON")

        try:
            with path.open("r", encoding="utf-8") as f:
                data = json.load(f)
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ JSON:", e)
            raise

        print(f"üì¶ –¢–∏–ø –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞: {type(data)}")
        if isinstance(data, dict):
            if "messages" in data:
                print("‚úÖ –ù–∞–π–¥–µ–Ω –∫–ª—é—á 'messages' ‚Äî Telegram —Ñ–æ—Ä–º–∞—Ç")
                data = data["messages"]
            else:
                raise ValueError("‚ùå –û–∂–∏–¥–∞–ª—Å—è –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –∫–ª—é—á 'messages' –≤ JSON")
        elif isinstance(data, list):
            print("‚úÖ JSON ‚Äî —ç—Ç–æ —Å–ø–∏—Å–æ–∫")
        else:
            raise TypeError("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON-—Ñ–∞–π–ª–∞")

        texts = []
        for msg in data:
            if not isinstance(msg, dict):
                continue
            text = msg.get("text", "")
            if isinstance(text, list):
                text = "".join(part.get("text", "") for part in text if isinstance(part, dict))
            if isinstance(text, str) and text.strip():
                texts.append(text.strip())

        print(f"üßæ –ò–∑–≤–ª–µ—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(texts)}")
        return "\n".join(texts)

    print(f"üìÑ –ß—Ç–µ–Ω–∏–µ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª")
    return path.read_text(encoding="utf-8")




def save_result(output_dir: Path, name: str, response: str, host: str, model: str):
    json_part = extract_json_from_response(response)
    parsed = fix_keys(json.loads(json_part))

    out_path = output_dir / f"{name}_analysis.json"
    out_path.write_text(json.dumps(parsed, ensure_ascii=False, indent=2), encoding="utf-8")
    return out_path, parsed

def extract_json_from_response(text: str) -> str:
    if "```json" in text:
        text = text.split("```json", 1)[-1]
    if "```" in text:
        text = text.split("```", 1)[0]
    return text.strip()

def fix_keys(d: dict) -> dict:
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø–µ—á–∞—Ç–∫–∏ –≤ –∫–ª—é—á–∞—Ö LLM-–æ—Ç–≤–µ—Ç–∞."""
    replacements = {
        "surnary": "summary",
        "parametrs": "parameters",
    }
    return {
        replacements.get(k, k): v if not isinstance(v, dict) else fix_keys(v)
        for k, v in d.items()
    }


def slugify(value) -> str:
    if not isinstance(value, str):
        value = str(value)
    return re.sub(r"[^\w]+", "_", value.lower()).strip("_")



def load_all_chats(path: Path) -> list[tuple[str, list[str]]]:
    raw = json.loads(path.read_text(encoding="utf-8"))

    # üí° –ø–æ–¥–¥–µ—Ä–∂–∞ Telegram-–∞—Ä—Ö–∏–≤–∞
    if isinstance(raw, dict) and "chats" in raw and "list" in raw["chats"]:
        raw = raw["chats"]["list"]

    if not (isinstance(raw, list) and all("messages" in d for d in raw)):
        raise ValueError("–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —Å –∫–ª—é—á–æ–º 'messages'")

    chats = []
    for i, entry in enumerate(raw):
        name = entry.get("name") or f"chat_{i+1}"
        msgs = []
        for msg in entry["messages"]:
            if msg.get("type") == "message":
                txt = msg.get("text")
                if isinstance(txt, str):
                    msgs.append(txt)
                elif isinstance(txt, list):
                    flat = "".join(part if isinstance(part, str) else part.get("text", "") for part in txt)
                    msgs.append(flat)
        chats.append((name, msgs))
    return chats

def robust_json_parse(value):
    if isinstance(value, dict):
        return value
    if not isinstance(value, str):
        raise TypeError("–û–∂–∏–¥–∞–ª–∞—Å—å —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å")

    match = re.search(r"{.*}", value, re.DOTALL)
    if not match:
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ JSON-–æ–±—ä–µ–∫—Ç –≤ —Å—Ç—Ä–æ–∫–µ")

    return json.loads(match.group(0))

def append_history(entry: dict, path: Path = Path("output/history.jsonl")) -> None:
    path.parent.mkdir(parents=True, exist_ok=True)
    with path.open("a", encoding="utf-8") as f:
        f.write(json.dumps(entry, ensure_ascii=False) + "\n")


def load_history_hashes(path: Path = Path("output/history.jsonl")) -> set[str]:
    if not path.exists():
        return set()
    hashes = set()
    for line in path.read_text(encoding="utf-8").splitlines():
        try:
            entry = json.loads(line)
            if "chat_hash" in entry:
                hashes.add(entry["chat_hash"])
        except Exception:
            continue
    return hashes


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üöÄ Main
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def main() -> None:
    done_hashes = load_history_hashes   ()
    cfg = EnvConfig()

    if not cfg.chat_file.exists():
        print("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –≤ CHAT_FILE", file=sys.stderr)
        sys.exit(1)

    if cfg.llm_host:
        host_cm = contextmanager(lambda: (yield cfg.llm_host))()
    else:
        if not cfg.ssh_host:
            print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –Ω–∏ LLM_HOST, –Ω–∏ SSH_HOST", file=sys.stderr)
            sys.exit(1)
        host_cm = SshTunnel(cfg)

    with host_cm as host_url:
        try:
            all_chats = load_all_chats(cfg.chat_file)
            for idx, (chat_name, messages) in enumerate(all_chats, 1):
                try:
                    chat_text = "\n".join(messages)
                    chat_hash = compute_text_hash(chat_text)

                    if chat_hash in done_hashes:
                        print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º (–Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è): {chat_name}")
                        continue

                    prompt = prepare_prompt(chat_text)
                    llm_data = call_llm(prompt, host_url, cfg.llm_model)
                    parsed = robust_json_parse(llm_data["response"])

                    filename_stub = f"{idx}_{slugify(chat_name)}"
                    out, _ = save_result(cfg.output_dir, filename_stub, llm_data["response"], host_url, cfg.llm_model)

                    result_data = {
                        "id": str(uuid.uuid4()),
                        "source_file": str(cfg.chat_file),
                        "created_at": datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S"),
                        "host": host_url,
                        "model": cfg.llm_model,
                        "result": parsed,
                        "success": True,
                        "error": None,
                        "chat_hash": chat_hash,
                    }
                    insert_json_result(result_data)

                    append_history({
                        "timestamp": datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S"),
                        "chat_file": str(cfg.chat_file),
                        "output": str(out),
                        "model": cfg.llm_model,
                        "host": host_url,
                        "success": True,
                        "chat_hash": chat_hash,
                    })
                    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {out.name}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —á–∞—Ç–∞ {chat_name}: {e}")
                    error_data = {
                        "id": str(uuid.uuid4()),
                        "source_file": str(cfg.chat_file),
                        "created_at": datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S"),
                        "host": host_url,
                        "model": cfg.llm_model,
                        "result": {},
                        "success": False,
                        "error": str(e),
                        "chat_hash": chat_hash,
                    }
                    insert_json_result(error_data)

        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}", file=sys.stderr)
            sys.exit(1)



if __name__ == "__main__":
    main()

